//java standard segmented sieve solution

import java.io.*;
import java.util.*;
public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static void simpleSieve(int limit, ArrayList<Integer> prime) {
        boolean[] mark = new boolean[limit + 1];
        Arrays.fill(mark, true);
        for (int p = 2; p * p < limit; p++) {
            if (mark[p]) {
                for (int i = p * p; i < limit; i += p) mark[i] = false;
            }
        }
        for (int p = 2; p < limit; p++) {
            if (mark[p]) prime.add(p);
        }
    }
    static void segmentedSieve(int n, int m) {
        int limit = (int)Math.sqrt(m) + 1;
        ArrayList<Integer> prime = new ArrayList<>();
        simpleSieve(limit, prime);
        boolean[] mark = new boolean[m - n + 1];
        Arrays.fill(mark, true);
        for (int i = 0; i < prime.size(); i++) {
            int lowLim = (n / prime.get(i)) * prime.get(i);
            if (lowLim < n) lowLim += prime.get(i);
            if (lowLim == prime.get(i)) lowLim += prime.get(i);
            for (int j = lowLim; j <= m; j += prime.get(i)) mark[j - n] = false;
        } for (int i = n; i <= m; i++) if (mark[i - n] && i != 1)System.out.println(i);
    } public static void main(String[] args) throws IOException {
        int n = readInt();
        int m = readInt();
        segmentedSieve(n, m);
    } static String next() throws IOException {
        while (st == null || !st.hasMoreTokens())
            st = new StringTokenizer(br.readLine().trim());
        return st.nextToken();
    }
    static long readLong() throws IOException {
        return Long.parseLong(next());
    }
    static int readInt() throws IOException {
        return Integer.parseInt(next());
    }
    static double readDouble() throws IOException {
        return Double.parseDouble(next());
    }
    static char readCharacter() throws IOException {
        return next().charAt(0);
    }
    static String readLine() throws IOException {
        return br.readLine().trim();
    }
}
