//c++ standard segemented sieve solution

#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
#include <string>
#include <sstream>

using namespace std;

void simpleSieve(int limit, vector<int>& prime) {
    vector<bool> mark(limit + 1, true);
    for (int p = 2; p * p < limit; p++) {
        if (mark[p]) {
            for (int i = p * p; i < limit; i += p) mark[i] = false;
        }
    }
    for (int p = 2; p < limit; p++) {
        if (mark[p]) prime.push_back(p);
    }
}

void segmentedSieve(int n, int m) {
    int limit = (int)sqrt(m) + 1;
    vector<int> prime;
    simpleSieve(limit, prime);
    vector<bool> mark(m - n + 1, true);
    for (int i = 0; i < prime.size(); i++) {
        int lowLim = (n / prime[i]) * prime[i];
        if (lowLim < n)
            lowLim += prime[i];
        if (lowLim == prime[i])
            lowLim += prime[i];
        for (int j = lowLim; j <= m; j += prime[i])
            mark[j - n] = false;
    }
    for (int i = n; i <= m; i++)
        if (mark[i - n] && i != 1)
            cout << i << endl;
}

int main() {
    int n, m;
    cin >> n >> m;
    segmentedSieve(n, m);
    return 0;
}
