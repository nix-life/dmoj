//Java solution

import java.util.*;
import java.io.*;

public class Main {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;

    public static void main(String[] args) throws IOException {
        int n = readInt();
        int[][] graph = new int[n][n];
        

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                graph[i][j] = readInt();
            }
        }

        int[] distances = new int[n];
        Arrays.fill(distances, Integer.MAX_VALUE);
        
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);  
        distances[0] = 0;

        while (!queue.isEmpty()) {
            int current = queue.poll();
            for (int next = 0; next < n; next++) {
                if (graph[current][next] == 1 && 
                    distances[current] + 1 < distances[next]) {
                    distances[next] = distances[current] + 1;
                    queue.add(next);
                }
            }
        }
        System.out.println(distances[n-1] == Integer.MAX_VALUE ? -1 : distances[n-1]);
    } static String next () throws IOException {
        while (st == null || ! st.hasMoreTokens())
            st = new StringTokenizer(br.readLine().trim());
        return st.nextToken();
    }
    static long readLong () throws IOException {
        return Long.parseLong(next());
    }
    static int readInt () throws IOException {
        return Integer.parseInt(next());
    }
    static double readDouble () throws IOException {
        return Double.parseDouble(next());
    }
    static char readCharacter () throws IOException {
        return next().charAt(0);
    }  
    static String readLine () throws IOException {
        return br.readLine().trim();
    }
}
